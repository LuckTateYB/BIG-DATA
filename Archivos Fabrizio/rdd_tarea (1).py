# -*- coding: utf-8 -*-
"""RDD_TAREA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1buo6rlfKQAXmhXp3c-Z0vpSZ55ZMuWw4
"""

import csv


csv_file = "Online Sales Data.csv"
rdd_csv = sc.textFile(csv_file)
rdd = rdd_csv.map(lambda line: next(csv.reader([line])))
rdd.collect()

sc = SparkContext.getOrCreate()

from pyspark import SparkContext

counts = rdd.map(lambda x: (tuple(x), 1)) \
            .reduceByKey(lambda a, b: a + b) \
            .collect()

print("Conteo de ocurrencias de cada fila:")
for row, count in counts:
    print(f"{row}: {count}")

sc.stop()

electronics_rdd = rdd.filter(lambda x: x[2].strip().lower() == "electronics")

print("Filas filtradas:")
print(filtered_rdd.collect())

product_names_rdd = filtered_rdd.flatMap(lambda x: [x[3]])

# Muestra los nombres de productos
print("Nombres de productos en la categoría 'Electronics':")
print(product_names_rdd.collect())

books_rdd = rdd.filter(lambda x: x[2].strip().lower() == "books")

# Usa union para combinar ambos RDDs
combined_rdd = electronics_rdd.union(books_rdd)

# Muestra el resultado combinado
print("Productos en las categorías 'Electronics' y 'Books':")
print(combined_rdd.collect())

# Extraer nombres de productos en "Electronics"
product_names_electronics_rdd = electronics_rdd.flatMap(lambda x: [x[3]])

# Extraer nombres de productos en "Books"
product_names_books_rdd = books_rdd.flatMap(lambda x: [x[3]])

# Muestra los nombres de productos
print("Nombres de productos en la categoría 'Books':")
print(product_names_books_rdd.collect())

# Usar intersección para encontrar productos en ambas categorías
intersection_rdd = product_names_electronics_rdd.intersection(product_names_books_rdd)

# Muestra el resultado de la intersección
print("Productos en común entre 'Electronics' y 'Books':")
print(intersection_rdd.collect())

